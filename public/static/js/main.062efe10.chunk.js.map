{"version":3,"sources":["images/delete.svg","images/pencil.svg","components/login.js","components/navbar.js","api/requestAPI.js","components/book.js","components/Books.js","components/confirmationPopup.js","components/deleteReview.js","components/editReview.js","components/review.js","components/postReview.js","components/bookDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginWithGithub","props","href","NavBar","loginDetails","isLogin","user","className","to","onClick","handleLogout","login","postReq","url","data","fetch","method","headers","body","JSON","stringify","Promise","resolve","reject","then","res","jsonResponse","json","status","catch","err","bookId","imageUrl","blob","reader","FileReader","onerror","onload","result","readAsDataURL","convertBlobToBase64","reviewId","reviewText","Book","id","frontimage","title","useState","image","setImage","useEffect","requestAPI","src","alt","Books","books","setBooks","bookList","map","bookDetails","key","ComfirmationPopup","onDelete","onCancel","DeleteReview","isVisible","setIsVisible","handleClick","delete_img","EditReview","setReviewText","value","onChange","event","target","updateReview","cancelEditMode","Review","reviewid","username","reviewtext","reviewdate","editMode","setEditMode","toggleReviewEditable","reviewTextContainer","updatedReview","edit_img","Date","toUTCString","PostReview","BookDetail","useParams","bookDetail","setBookDetail","reviews","setReviews","writer","length","review","App","setLoginDetails","userDetails","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.062efe10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.650cdc57.svg\";","module.exports = __webpack_public_path__ + \"static/media/pencil.aa0b5ae2.svg\";","import React from 'react';\n\nconst LoginWithGithub = (props) => {\n  return (\n    <div>\n      <a href=\"https://github.com/login/oauth/authorize?client_id=48185bdb82c854d22f89\">\n        Login\n      </a>\n    </div>\n  );\n};\n\nexport default LoginWithGithub;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoginWithGithub from './login';\n\nconst NavBar = (props) => {\n  const { loginDetails } = props;\n\n  if (loginDetails.isLogin) {\n    const { user } = loginDetails;\n    return (\n      <div className=\"navbar\">\n        <div>\n          <Link to=\"/\">\n            <h3>Reader's Junction</h3>\n          </Link>\n        </div>\n        <div>\n          <button className=\"btnlink\" onClick={props.handleLogout}>\n            Logout\n          </button>\n          <span>{user.login}</span>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"navbar\">\n      <div>\n        <Link to=\"/\">\n          <h3>Reader's Junction</h3>\n        </Link>\n      </div>\n      <div>\n        <LoginWithGithub />\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","const postReq = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n};\n\nconst getUser = () => {\n  return new Promise((resolve, reject) => {\n    fetch('/api/getUser')\n      .then((res) => {\n        const jsonResponse = res.json();\n        if (res.status === 403) {\n          reject(jsonResponse);\n          return;\n        }\n        resolve(jsonResponse);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nconst getBooks = () => {\n  return new Promise((resolve, reject) => {\n    fetch('/api/getBooks').then((res) => {\n      resolve(res.json());\n    });\n  });\n};\n\nconst getBook = (bookId) => {\n  return new Promise((resolve, reject) => {\n    fetch(`/api/getBook?bookId=${bookId}`)\n      .then((res) => {\n        resolve(res.json());\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nconst getReviewOfBook = (bookId) => {\n  return new Promise((resolve, reject) => {\n    fetch(`/api/getReviewOfBook?bookId=${bookId}`).then((res) => {\n      resolve(res.json());\n    });\n  });\n};\n\nconst convertBlobToBase64 = (blob) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n};\n\nconst fetchImage = (imageUrl) => {\n  return fetch(imageUrl)\n    .then((res) => res.blob())\n    .then((blob) => convertBlobToBase64(blob));\n};\n\nconst addReview = (bookId, reviewText) =>\n  postReq('/api/addReview', { bookId, reviewText });\n\nconst deleteReview = (reviewId) => postReq('/api/deleteReview', { reviewId });\nconst updateReview = (reviewId, reviewText) =>\n  postReq('/api/updateReview', { reviewId, reviewText });\n\nconst logout = () => postReq('/api/logout');\n\nexport default {\n  getUser,\n  getBooks,\n  getBook,\n  logout,\n  getReviewOfBook,\n  fetchImage,\n  deleteReview,\n  addReview,\n  updateReview\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport requestAPI from '../api/requestAPI';\n\nconst Book = (props) => {\n  const { id, frontimage, title } = props;\n  const [image, setImage] = useState('');\n\n  useEffect(() => {\n    requestAPI.fetchImage(frontimage).then(setImage);\n  }, [frontimage]);\n\n  return (\n    <div className=\"book-card\">\n      <Link to={`/book/${id}`}>\n        <img src={image} alt=\"Avatar\" className=\"book-card-img\" />\n      </Link>\n      <div className=\"book-detail\">\n        <h4>\n          <b>{title}</b>\n        </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Book;\n","import React, { useEffect, useState } from 'react';\nimport requestAPI from '../api/requestAPI';\nimport Book from './book';\n\nconst Books = (props) => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    requestAPI.getBooks().then(setBooks);\n  }, []);\n\n  const bookList = books.map((bookDetails) => {\n    return <Book {...bookDetails} key={bookDetails.id} />;\n  });\n  return <div className=\"book-list-container\">{bookList}</div>;\n};\n\nexport default Books;\n","import React from 'react';\n\nconst ComfirmationPopup = (props) => {\n  const { onDelete, onCancel } = props;\n  return (\n    <div className=\"modal\">\n      <div className=\"popup-box\">\n        <div className=\"popup-heading\">Do you want to delete review ?</div>\n        <div className=\"popup-btn\">\n          <button className=\"danger-btn\" onClick={onDelete}>\n            Delete\n          </button>\n          <button className=\"cancel-btn\" onClick={onCancel}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ComfirmationPopup;\n","import React, { useState } from 'react';\nimport delete_img from '../images/delete.svg';\nimport ComfirmationPopup from './confirmationPopup';\n\nconst DeleteReview = (props) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleClick = () => {\n    setIsVisible(!isVisible);\n  };\n\n  return (\n    <div>\n      {isVisible && (\n        <ComfirmationPopup onDelete={props.onClick} onCancel={handleClick} />\n      )}\n      <img\n        className=\"review-delete-btn\"\n        onClick={handleClick}\n        src={delete_img}\n        alt=\"Delete review\"\n      />\n    </div>\n  );\n};\n\nexport default DeleteReview;\n","import React, { useState } from 'react';\n\nconst EditReview = (props) => {\n  const [reviewText, setReviewText] = useState(props.reviewText);\n\n  const handleChange = (event) => {\n    setReviewText(event.target.value);\n  };\n\n  return (\n    <div className=\"update-review-container\">\n      <textarea\n        value={reviewText}\n        className=\"post-review-textArea\"\n        onChange={handleChange}\n      />\n      <div>\n        <button\n          className=\"update-review-btn\"\n          onClick={() => props.updateReview(reviewText)}\n        >\n          Update Review\n        </button>\n        <button className=\"cancel-review-btn\" onClick={props.cancelEditMode}>\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditReview;\n","import React, { useState } from 'react';\nimport DeleteReview from './deleteReview';\nimport requestAPI from '../api/requestAPI';\nimport EditReview from './editReview';\nimport edit_img from '../images/pencil.svg';\n\nconst Review = (props) => {\n  const { reviewid, username, reviewtext, reviewdate } = props;\n  const [editMode, setEditMode] = useState(false);\n\n  const deleteReview = () => {\n    requestAPI.deleteReview(reviewid).then(() => {\n      props.updateReview();\n    });\n  };\n\n  const toggleReviewEditable = () => {\n    setEditMode(!editMode);\n  };\n\n  const updateReview = (updatedReview) => {\n    requestAPI.updateReview(reviewid, updatedReview).then(() => {\n      props.updateReview();\n      toggleReviewEditable();\n    });\n  };\n\n  const reviewTextContainer = editMode ? (\n    <EditReview\n      reviewText={reviewtext}\n      updateReview={updateReview}\n      cancelEditMode={toggleReviewEditable}\n    />\n  ) : (\n    <div className=\"review-text\">{reviewtext}</div>\n  );\n\n  return (\n    <div className=\"review-box\">\n      <div className=\"review-header\">\n        <b>\n          <i>{username}</i>\n        </b>\n        <div className=\"review-action-btn\">\n          <DeleteReview onClick={deleteReview} />\n          <img\n            className=\"review-delete-btn\"\n            onClick={toggleReviewEditable}\n            src={edit_img}\n            alt=\"Edit review\"\n          />\n        </div>\n      </div>\n      {reviewTextContainer}\n      <div className=\"review-time\">\n        <span>{new Date(reviewdate).toUTCString()}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Review;\n","import React, { useState } from 'react';\nimport requestAPI from '../api/requestAPI';\n\nconst PostReview = (props) => {\n  const { bookId } = props;\n\n  const [reviewText, setReviewText] = useState('');\n\n  const postReview = () => {\n    requestAPI.addReview(bookId, reviewText).then(() => {\n      props.updateReview();\n      setReviewText('');\n    });\n  };\n  \n  const handleChange = (event) => {\n    setReviewText(event.target.value);\n  };\n\n  return (\n    <div className=\"post-review-container\">\n      <textarea\n        value={reviewText}\n        className=\"post-review-textArea\"\n        onChange={handleChange}\n      />\n      <div>\n        <button className=\"post-review-btn\" onClick={postReview}>\n          Post Review\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PostReview;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport requestAPI from '../api/requestAPI';\nimport Review from './review';\nimport PostReview from './postReview';\n\nconst BookDetail = (props) => {\n  const { bookId } = useParams();\n  const [bookDetail, setBookDetail] = useState({});\n  const [reviews, setReviews] = useState([]);\n  const [image, setImage] = useState('');\n\n  const updateReview = () => {\n    requestAPI.getReviewOfBook(bookId).then(setReviews);\n  };\n\n  useEffect(() => {\n    requestAPI.getBook(bookId).then(setBookDetail);\n    requestAPI.getReviewOfBook(bookId).then(setReviews);\n  }, [bookId]);\n\n  useEffect(() => {\n    bookDetail.frontimage &&\n      requestAPI.fetchImage(bookDetail.frontimage).then(setImage);\n  }, [bookDetail.frontimage]);\n\n  return (\n    <div>\n      <div className=\"book-container\">\n        <img src={image} alt={bookDetail.title}></img>\n        <div className=\"detail\">\n          <h2>{bookDetail.title}</h2>\n          <p>by {bookDetail.writer}</p>\n          <p>\n            {reviews.length} review{reviews.length > 1 ? 's' : ''}\n          </p>\n        </div>\n      </div>\n      <div className=\"review-container\">\n        {reviews.map((review) => {\n          return (\n            <Review\n              key={review.reviewid}\n              {...review}\n              updateReview={updateReview}\n            />\n          );\n        })}\n      </div>\n      <div>\n        <PostReview bookId={bookId} updateReview={updateReview} />\n      </div>\n    </div>\n  );\n};\n\nexport default BookDetail;\n","import React, { useState, useEffect } from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport NavBar from './components/navbar';\nimport requestAPI from './api/requestAPI';\nimport './components/style.css';\nimport Books from './components/Books';\nimport BookDetail from './components/bookDetail';\n\nfunction App() {\n  const [loginDetails, setLoginDetails] = useState({\n    isLogin: false,\n    user: null\n  });\n\n  useEffect(() => {\n    requestAPI.getUser().then((userDetails) => {\n      if (userDetails) {\n        setLoginDetails({ isLogin: true, user: userDetails });\n      }\n    });\n  }, [loginDetails.isLogin]);\n\n  const handleLogout = function() {\n    requestAPI.logout().then(() => {\n      setLoginDetails({ isLogin: false, user: null });\n    });\n  };\n\n  return (\n    <BrowserRouter>\n      <NavBar loginDetails={loginDetails} handleLogout={handleLogout} />\n      <Switch>\n        <Route exact path=\"/\">\n          <div>\n            <Books />\n          </div>\n        </Route>\n        <Route path=\"/book/:bookId\">\n          <BookDetail />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}